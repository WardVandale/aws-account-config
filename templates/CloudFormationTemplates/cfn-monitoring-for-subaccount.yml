AWSTemplateFormatVersion: 2010-09-09

Resources:


  ### Create a number of timed triggers (5 minutes, 15 minutes, 60 minutes)
  ScheduledRule5min:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(5 minutes)"
      State: "ENABLED"

  ScheduledRule15min:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(15 minutes)"
      State: "ENABLED"

  ScheduledRule60min:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(60 minutes)"
      State: "ENABLED"

  MonitoringSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: MontoringSNSTopic

  MonitoringSNSTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
        - Sid: DefaultPolicyStatement
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:Publish
          - SNS:RemovePermission
          - SNS:SetTopicAttributes
          - SNS:DeleteTopic
          - SNS:ListSubscriptionsByTopic
          - SNS:GetTopicAttributes
          - SNS:Receive
          - SNS:AddPermission
          - SNS:Subscribe
          Resource: !Ref MonitoringSNSTopic
          Condition:
            StringEquals:
              AWS:SourceOwner: !Sub "${AWS::AccountId}"
        - Sid: AllowSNSPublishPolicyStatement
          Effect: Allow
          Principal:
            AWS: "*"
          Action: SNS:Publish
          Resource: !Ref MonitoringSNSTopic
      Topics:
        - !Ref MonitoringSNSTopic


{% for chat_webhook in item[0].item.chat_webhooks | default([]) %}
  ChatWebhook{{ chat_webhook.cfn_name }}:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LambdaBasicExecutionRole"
      Environment:
        Variables:
          WEBHOOKPATH: "{{ chat_webhook.path }}"
          WEBHOOKHOST: "{{ chat_webhook.host }}"
      Code:
{%   if item[1] == 'eu-central-1' %}
        S3Bucket: "{{ tooling_name_prefix_env }}-s3-lambda-function-store"
{%   else %}
        S3Bucket: "{{ tooling_name_prefix_env }}-s3-lambda-function-store-{{ item[1] }}"
{%   endif %}
        S3Key: "{{ lambda_s3_keys.sns_to_chat }}"
      Runtime: nodejs12.x

  SNSSubscriptionChatWebhook{{ chat_webhook.cfn_name }}:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt ChatWebhook{{ chat_webhook.cfn_name }}.Arn
      Protocol: lambda
      TopicArn: !Ref MonitoringSNSTopic

  SNSPermissionChatWebhook{{ chat_webhook.cfn_name }}:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ChatWebhook{{ chat_webhook.cfn_name }}.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref MonitoringSNSTopic

{% endfor %}

  HealthNotification:
    Type: AWS::Events::Rule
    Properties:
      Description: Post all health notifications on the Monitoring SNS topic
      State: "ENABLED"
      EventPattern:
        source:
          - aws.health
      Targets:
        - Arn: !Ref MonitoringSNSTopic
          Id: !Sub "IdHealthNotification${AWS::AccountId}"

Outputs:

  MonitoringSNSTopic:
    Value: !Ref MonitoringSNSTopic
    Description: MonitoringSNSTopic
    Export:
      Name: !Sub "${AWS::StackName}-MonitoringSNSTopic"

  ScheduledRule5min:
    Value: !Ref ScheduledRule5min
    Description: ScheduledRule5min
    Export:
      Name: !Sub "${AWS::StackName}-ScheduledRule5min"

  ScheduledRule15min:
    Value: !Ref ScheduledRule15min
    Description: ScheduledRule15min
    Export:
      Name: !Sub "${AWS::StackName}-ScheduledRule15min"

  ScheduledRule60min:
    Value: !Ref ScheduledRule60min
    Description: ScheduledRule60min
    Export:
      Name: !Sub "${AWS::StackName}-ScheduledRule60min"

  ScheduledRule5minArn:
    Value: !GetAtt ScheduledRule5min.Arn
    Description: ScheduledRule5minArn
    Export:
      Name: !Sub "${AWS::StackName}-ScheduledRule5minArn"

  ScheduledRule15minArn:
    Value: !GetAtt ScheduledRule15min.Arn
    Description: ScheduledRule15minArn
    Export:
      Name: !Sub "${AWS::StackName}-ScheduledRule15minArn"

  ScheduledRule60minArn:
    Value: !GetAtt ScheduledRule60min.Arn
    Description: ScheduledRule60minArn
    Export:
      Name: !Sub "${AWS::StackName}-ScheduledRule60minArn"
